{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "dataFactoryName": {
            "type": "string",
            "metadata": {
                "description": "The name you provide will be appended with a unique sting to make it globally available. The name can contain only letters, numbers and hyphens. The first and last characters must be a letter or number. Spaces are not allowed."
            }
        },
        "dataFactoryLocation": {
            "type": "string",
            "metadata": {
            }
        },
        "storageAccountName": {
            "type": "string",
            "metadata": {
                "description": "The name you provide will be appended with a unique sting to make it globally available. The field can contain only lowercase letters and numbers. Name must be between 1 and 11 characters."
            }
        },
        "sasURI": {
            "type": "string"
        },
        "sqlServerName": {
            "type": "string",
            "metadata": {
                "description": "The name you provide will be appended with a unique sting to make it globally available. Your server name can contain only lowercase letters, numbers, and '-', but can't start or end with '-' or have more than 49 characters."
            }
        },
        "location": {
            "type": "string",
            "metadata": {
                "description": "Location for all resources."
            }
        },
        "sqlAdministratorLogin": {
            "type": "string",
            "metadata": {
                "description": "Your login name must not contain a SQL Identifier or a typical system name (like admin, administrator, sa, root, dbmanager, loginmanager, etc.) or a built-in database user or role (like dbo, guest, public, etc.)"
            }
        },
        "sqlAdministratorLoginPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Your password must be at least 8 characters in length. Your password must contain characters from three of the following categories â€“ English uppercase letters, English lowercase letters, numbers (0-9), and non-alphanumeric characters (!, $, #, %, etc.) Your password cannot contain all or part of the login name. Part of a login name is defined as three or more consecutive alphanumeric characters."

            }
        },
        "sqlDBName": {
            "type": "string",
            "metadata": {
                "description": "Value should not match special patterns. It should contain a length of maximum of 128."
            }
        },
        "dataWarehouseName": {
            "type": "string",
            "metadata": {
                "description": "Value should not match special patterns. It should contain a length of maximum of 128."
            }
        },
        "selectDataLoader": {
            "type": "string",
            "allowedValues": [
                "SQL Database",
                "Synapse Database Warehouse",
                "Both"
            ],
            "metadata": {
                "description": "Specify if you want to write the data into SQL database."
            }
        },
        "deployAndUseDataShare": {
            "type": "string",
            "allowedValues": [
                "Yes",
                "No"
            ],
            "metadata": {
                "description": "Specify if you want to deploy data share."
            }
        },
        "triggerStartTime": {
            "type": "string",
            "defaultValue": "[utcNow('u')]"
        },
        "notificationEmail": {
            "type": "string",
            "metadata": {
                "description": "Please specify comma separated email addresses on which you would like to receive the ADF pipeline alerts."
            }
        },
        "webHookUri": {
            "type": "string"

        }

    },
    "variables": {
    },
    "resources": [
        {
            "type": "Microsoft.DataFactory/factories",
            "apiVersion": "2018-06-01",
            "name": "[parameters('dataFactoryName')]",
            "location": "[parameters('dataFactoryLocation')]",
            "tags": {
                "Environment": "Customer",
                "AssociatedDataSet": "CovidOntario"
            },
            "identity": {
                "type": "SystemAssigned"
            },
            "resources": [
                {
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "name": "[concat(parameters('dataFactoryName'), '/publicStorageLinkedService')]",
                    "dependsOn": [
                        "[parameters('dataFactoryName')]"
                    ],
                    "properties": {
                        "annotations": [],
                        "type": "AzureBlobStorage",
                        "typeProperties": {
                            "sasUri": {
                                "type": "SecureString",
                                "value": "[parameters('sasURI')]"
                            }
                        }
                    }
                },
                {
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "name": "[concat(parameters('dataFactoryName'), '/customerStorageLinkedService')]",
                    "dependsOn": [
                        "[parameters('dataFactoryName')]"
                    ],
                    "properties": {
                        "type": "AzureBlobStorage",
                        "typeProperties": {
                            "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',listKeys(concat(resourceGroup().id,'/providers/Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2019-06-01').keys[0].value)]"
                        }
                    }
                },
                {
                    "condition": "[not(equals(parameters('selectDataLoader'),'SQL Database'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/AzureSynapseAnalyticsStaging')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "AzureSqlDW",
                        "typeProperties": {
                            "connectionString": "[concat('integrated security=False;encrypt=True;connection timeout=30;data source=',parameters('sqlServerName'),'.database.windows.net;initial catalog=',parameters('dataWarehouseName'),';user id=',parameters('sqlAdministratorLogin'),';Password=',parameters('sqlAdministratorLoginPassword'))]"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]"
                    ]
                },
                {
                    "condition": "[not(equals(parameters('selectDataLoader'),'SQL Database'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/AzureSynapseOperational')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "AzureSqlDW",
                        "typeProperties": {
                            "connectionString": "[concat('integrated security=False;encrypt=True;connection timeout=30;data source=',parameters('sqlServerName'),'.database.windows.net;initial catalog=',parameters('dataWarehouseName'),';user id=',parameters('sqlAdministratorLogin'), ';Password=', parameters('sqlAdministratorLoginPassword'))]"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]"
                    ]
                },
                {
                    "condition": "[not(equals(parameters('selectDataLoader'),'Synapse Database Warehouse'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/AzureSqlDatabase')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "AzureSqlDatabase",
                        "typeProperties": {
                            "connectionString": "[concat('data source=',parameters('sqlServerName'),'.database.windows.net;integrated security=False;Server=tcp:',parameters('sqlServerName'),'.database.windows.net,1433;Initial Catalog=',parameters('sqlDBName'),';Persist Security Info=False;User ID=',parameters('sqlAdministratorLogin'),';Password=',parameters('sqlAdministratorLoginPassword'),';MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;')]"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('deployAndUseDataShare'),'No')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "name": "[concat(parameters('dataFactoryName'), '/OntarioInputDataset')]",

                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/publicStorageLinkedService')]"
                    ],
                    "properties": {
                        "folder": {
                            "name": "CovidOntario/Sources"
                        },
                        "linkedServiceName": {
                            "referenceName": "publicStorageLinkedService",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "Binary",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "folderPath": "curated/covid-19/covid_ontario/latest",
                                "container": "public"
                            }
                        }
                    }
                },
                {
                    "condition": "[equals(parameters('deployAndUseDataShare'),'No')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "name": "[concat(parameters('dataFactoryName'), '/OntarioOutputDatasetSource')]",
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/customerStorageLinkedService')]"
                    ],
                    "properties": {
                        "folder": {
                            "name": "CovidOntario/Sources"
                        },
                        "linkedServiceName": {
                            "referenceName": "customerStorageLinkedService",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "fileName": "covid_tracking.csv",
                                "folderPath": "Ontario",
                                "container": "receivedcopy"
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    }
                },
                {
                    "condition": "[equals(parameters('deployAndUseDataShare'),'No')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "name": "[concat(parameters('dataFactoryName'), '/OntarioOutputDatasetSink')]",
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/customerStorageLinkedService')]"
                    ],
                    "properties": {
                        "folder": {
                            "name": "CovidOntario/Sinks"
                        },
                        "linkedServiceName": {
                            "referenceName": "customerStorageLinkedService",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "Binary",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "folderPath": "Ontario",
                                "container": "receivedcopy"
                            }
                        }
                    }
                },
                {
                    "condition": "[not(equals(parameters('selectDataLoader'),'SQL Database'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/AzureSynapseAnalyticsStagingTableSource')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario/Sources"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureSynapseAnalyticsStaging",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "AzureSqlDWTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": "Ontario",
                            "table": "stagingOntario"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/AzureSynapseAnalyticsStaging')]"
                    ]
                },
                {
                    "condition": "[not(equals(parameters('selectDataLoader'),'SQL Database'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/AzureSynapseAnalyticsStagingTableSink')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario/Sinks"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureSynapseAnalyticsStaging",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "AzureSqlDWTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": "Ontario",
                            "table": "stagingOntario"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/AzureSynapseAnalyticsStaging')]"
                    ]
                },
                {
                    "condition": "[not(equals(parameters('selectDataLoader'),'SQL Database'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SynapseOperationalTable_sink')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario/Sinks"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureSynapseOperational",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "AzureSqlDWTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": "Ontario",
                            "table": "operationalOntario"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/AzureSynapseOperational')]"
                    ]
                },
                {
                    "condition": "[not(equals(parameters('selectDataLoader'),'Synapse Database Warehouse'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SqlDbStagingSource')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario/Sources"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureSqlDatabase",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "AzureSqlTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": "Ontario",
                            "table": "stagingOntario"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/AzureSqlDatabase')]"
                    ]
                },
                {
                    "condition": "[not(equals(parameters('selectDataLoader'),'Synapse Database Warehouse'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SqlDbStagingSink')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario/Sinks"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureSqlDatabase",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "AzureSqlTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": "Ontario",
                            "table": "stagingOntario"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/AzureSqlDatabase')]"
                    ]
                },
                {
                    "condition": "[not(equals(parameters('selectDataLoader'),'Synapse Database Warehouse'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SqlOperationalSink')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario/Sinks"
                        },
                        "linkedServiceName": {
                            "referenceName": "AzureSqlDatabase",
                            "type": "LinkedServiceReference"
                        },
                        "annotations": [],
                        "type": "AzureSqlTable",
                        "schema": [],
                        "typeProperties": {
                            "schema": "Ontario",
                            "table": "operationalOntario"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/AzureSqlDatabase')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'Synapse Database Warehouse'),equals(parameters('deployAndUseDataShare'),'No'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/LoadIntoStagingTable')]",
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "OntarioOutputDatasetSource",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SourceCSV"
                                }
                            ],
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "AzureSynapseAnalyticsStagingTableSink",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SynapseStagingSink"
                                }
                            ],
                            "transformations": [
                                {
                                    "name": "CleanData"
                                }
                            ],
                            "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'filename',\n\tinferDriftedColumnTypes: true) ~> SourceCSV\nSourceCSV derive(each(match(type=='string'), $$ = trim(toString($$))),\n\t\teach(match(type=='integer'), $$ = toInteger($$)),\n\t\teach(match(type=='short'), $$ = toShort($$)),\n\t\teach(match(type=='double'), $$ = round(toDouble($$),3)),\n\t\teach(match(type=='decimal'), $$ = toDecimal($$))) ~> CleanData\nCleanData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SynapseStagingSink"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/OntarioOutputDatasetSource')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSink')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Synapse Database Warehouse')]",
                    "name": "[concat(parameters('dataFactoryName'), '/LoadIntoOperationalTable')]",
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "AzureSynapseAnalyticsStagingTableSource",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sourceSynapseStagingTable"
                                }
                            ],
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "SynapseOperationalTable_sink",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SynapseOperationalTable"
                                }
                            ],
                            "transformations": [],
                            "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceSynapseStagingTable\nsourceSynapseStagingTable sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tpostSQLs:['\\n'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SynapseOperationalTable"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSource')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SynapseOperationalTable_sink')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'Both'),equals(parameters('deployAndUseDataShare'),'No'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/LoadIntoStagingTable_SynapseWithSQL')]",
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "OntarioOutputDatasetSource",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SourceCSV"
                                }
                            ],
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "AzureSynapseAnalyticsStagingTableSink",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SynapseStagingSink"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "SqlDbStagingSink",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SQLStagingSink"
                                }
                            ],
                            "transformations": [
                                {
                                    "name": "CleanData"
                                }
                            ],
                            "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'filename',\n\tinferDriftedColumnTypes: true) ~> SourceCSV\nSourceCSV derive(each(match(type=='string'), $$ = trim(toString($$))),\n\t\teach(match(type=='short'), $$ = toShort($$)),\n\t\teach(match(type=='integer'), $$ = toInteger($$)),\n\t\teach(match(type=='double'), $$ = round(toDouble($$),3)),\n\t\teach(match(type=='decimal'), $$ = toDecimal($$))) ~> CleanData\nCleanData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SynapseStagingSink\nCleanData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLStagingSink"
                        }
                    },
                    "dependsOn": [
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/OntarioOutputDatasetSource')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSink')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SqlDbStagingSink')]",
                        "[parameters('dataFactoryName')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Both')]",
                    "name": "[concat(parameters('dataFactoryName'), '/LoadIntoOperationalTable_SynapseWithSQL')]",
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "AzureSynapseAnalyticsStagingTableSource",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sourceSynapseStagingTable"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "SqlDbStagingSource",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sourceSqlDbStaging"
                                }
                            ],
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "SynapseOperationalTable_sink",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SynapseOperationalTable"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "SqlOperationalSink",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SqlOperationalSink"
                                }
                            ],
                            "transformations": [],
                            "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table',\n\tstaged: false) ~> sourceSynapseStagingTable\nsource(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> sourceSqlDbStaging\nsourceSynapseStagingTable sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tstaged: true,\n\tpostSQLs:['\\n'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tt: true) ~> SynapseOperationalTable\nsourceSqlDbStaging sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SqlOperationalSink"
                        }
                    },
                    "dependsOn": [
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SqlDbStagingSource')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SynapseOperationalTable_sink')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SqlOperationalSink')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSource')]",
                        "[parameters('dataFactoryName')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'SQL Database'),equals(parameters('deployAndUseDataShare'),'No'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/LoadIntoStagingTable_SQL')]",
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "OntarioOutputDatasetSource",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SourceCSV"
                                }
                            ],
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "SqlDbStagingSink",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SQLStagingSink"
                                }
                            ],
                            "transformations": [
                                {
                                    "name": "CleanData"
                                }
                            ],
                            "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'filename',\n\tinferDriftedColumnTypes: true) ~> SourceCSV\nSourceCSV derive(each(match(type=='string'), $$ = trim(toString($$))),\n\t\teach(match(type=='double'), $$ = round(toDouble($$),3)),\n\t\teach(match(type=='short'), $$ = toShort($$)),\n\t\teach(match(type=='integer'), $$ = toInteger($$)),\n\t\teach(match(type=='decimal'), $$ = toDecimal($$))) ~> CleanData\nCleanData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLStagingSink"
                        }
                    },
                    "dependsOn": [
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/OntarioOutputDatasetSource')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSink')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SqlDbStagingSink')]",
                        "[parameters('dataFactoryName')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'SQL Database')]",
                    "name": "[concat(parameters('dataFactoryName'), '/LoadIntoOperationalTable_SQL')]",
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "SqlDbStagingSource",
                                        "type": "DatasetReference"
                                    },
                                    "name": "sourceSqlDbStaging"
                                }
                            ],
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "SqlOperationalSink",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SqlOperationalSink"
                                }
                            ],
                            "transformations": [],
                            "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tinferDriftedColumnTypes: true,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> sourceSqlDbStaging\nsourceSqlDbStaging sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SqlOperationalSink"
                        }
                    },
                    "dependsOn": [
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SqlOperationalSink')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SqlDbStagingSource')]",
                        "[parameters('dataFactoryName')]"
                    ]
                },

                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'Synapse Database Warehouse'),equals(parameters('deployAndUseDataShare'),'No'))]",
                    "type": "Microsoft.DataFactory/factories/pipelines",
                    "apiVersion": "2018-06-01",
                    "name": "[concat(parameters('dataFactoryName'), '/SynapseDataLoader')]",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "activities": [
                            {
                                "name": "Copy latest data",
                                "type": "Copy",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "BinarySource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "BinarySink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "OntarioInputDataset",
                                        "type": "DatasetReference"
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "OntarioOutputDatasetSink",
                                        "type": "DatasetReference"
                                    }
                                ]
                            },
                            {
                                "name": "Verify Master Key",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "Copy latest data",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "SqlDWSource",
                                        "sqlReaderQuery": "IF (select Count(*) from sys.symmetric_keys where name like '%DatabaseMasterKey%') = 0\n\nBEGIN\n\nCREATE master key;\n\nIF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario' )\n\n    EXEC('CREATE SCHEMA [Ontario] AUTHORIZATION [dbo]');\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\nIF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario' )\n\n    EXEC('CREATE SCHEMA [Ontario] AUTHORIZATION [dbo]');\n\nselect Count(*) from sys.symmetric_keys;\n\nEND\n",
                                        "queryTimeout": "02:00:00"
                                    },
                                    "dataset": {
                                        "referenceName": "AzureSynapseAnalyticsStagingTableSource",
                                        "type": "DatasetReference"
                                    }
                                }
                            },
                            {
                                "name": "LoadIntoStagingTable",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "Verify Master Key",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/customerStorageLinkedService')]"
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "LoadIntoStagingTable",
                                        "type": "DataFlowReference",
                                        "parameters": {},
                                        "datasetParameters": {
                                            "SourceCSV": {},
                                            "SynapseStagingSink": {}
                                        }
                                    },
                                    "staging": {
                                        "linkedService": {
                                            "referenceName": "customerStorageLinkedService",
                                            "type": "LinkedServiceReference"
                                        },
                                        "folderPath": "receivedcopy"
                                    },
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    }
                                }
                            },
                            {
                                "name": "LoadIntoOperationalTable",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoStagingTable",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/customerStorageLinkedService')]"
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "LoadIntoOperationalTable",
                                        "type": "DataFlowReference",
                                        "parameters": {},
                                        "datasetParameters": {
                                            "sourceSynapseStagingTable": {},
                                            "SynapseOperationalTable": {}
                                        }
                                    },
                                    "staging": {
                                        "linkedService": {
                                            "referenceName": "customerStorageLinkedService",
                                            "type": "LinkedServiceReference"
                                        },
                                        "folderPath": "receivedcopy"
                                    },
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    }
                                }
                            },
                            {
                                "name": "Create Views in Synapse",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoOperationalTable",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "SqlDWSource",
                                        "sqlReaderQuery": "IF EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario') \n\nBEGIN\nIF NOT EXISTS (select * from sys.views where name = N'Ontario_view')\n    EXEC('create view Ontario.Ontario_view as select Load_Date, Load_Time, Accurate_Episode_Date, Case_Reported_Date, Test_Reported_Date, Specimen_Date, Age_Group, Client_Gender, Reporting_Phu, Reporting_Phu_Address, Reporting_Phu_City, Reporting_Phu_Latitude, Reporting_Phu_Longitude from Ontario.operationalOntario;')\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
                                        "queryTimeout": "00:10:00"
                                    },
                                    "dataset": {
                                        "referenceName": "SynapseOperationalTable_sink",
                                        "type": "DatasetReference"
                                    }
                                }
                            }
                        ],
                        "annotations": []
                    },
                    "dependsOn": [
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/dataflows/LoadIntoStagingTable')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/dataflows/LoadIntoOperationalTable')]",
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/OntarioInputDataset')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/OntarioOutputDatasetSink')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSource')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SynapseOperationalTable_sink')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'Both'),equals(parameters('deployAndUseDataShare'),'No'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SynapseAndSqlDataLoader')]",
                    "type": "Microsoft.DataFactory/factories/pipelines",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "activities": [
                            {
                                "name": "Copy latest data",
                                "type": "Copy",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "0.00:20:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "BinarySource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "BinarySink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "OntarioInputDataset",
                                        "type": "DatasetReference"
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "OntarioOutputDatasetSink",
                                        "type": "DatasetReference"
                                    }
                                ]
                            },
                            {
                                "name": "Verify Master Key",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "Copy latest data",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "0.00:10:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "SqlDWSource",
                                        "sqlReaderQuery": "IF (select Count(*) from sys.symmetric_keys where name like '%DatabaseMasterKey%') = 0\n\nBEGIN\n\nCREATE master key;\n\nIF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario' )\n\n    EXEC('CREATE SCHEMA [Ontario] AUTHORIZATION [dbo]');\nselect Count(*) from sys.symmetric_keys;\n\n\nEND\n\nELSE \n\nBEGIN\nIF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario' )\n\n    EXEC('CREATE SCHEMA [Ontario] AUTHORIZATION [dbo]');\n\nselect Count(*) from sys.symmetric_keys;\n\nEND\n",
                                        "queryTimeout": "00:05:00"
                                    },
                                    "dataset": {
                                        "referenceName": "AzureSynapseAnalyticsStagingTableSource",
                                        "type": "DatasetReference"
                                    }
                                }
                            },
                            {
                                "name": "Verify Schema in SQL DB",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "Verify Master Key",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "0.00:10:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": "IF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario') \n\nBEGIN\n\n    EXEC('CREATE SCHEMA [Ontario] AUTHORIZATION [dbo]');\n\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
                                        "queryTimeout": "00:05:00"
                                    },
                                    "dataset": {
                                        "referenceName": "SqlDbStagingSource",
                                        "type": "DatasetReference"
                                    }
                                }
                            },
                            {
                                "name": "LoadIntoStagingTable_SynapseWithSQL",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "Verify Schema in SQL DB",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/customerStorageLinkedService')]"
                                ],
                                "policy": {
                                    "timeout": "0.00:30:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "LoadIntoStagingTable_SynapseWithSQL",
                                        "type": "DataFlowReference",
                                        "parameters": {},
                                        "datasetParameters": {
                                            "SourceCSV": {},
                                            "SynapseStagingSink": {},
                                            "SQLStagingSink": {}
                                        }
                                    },
                                    "staging": {
                                        "linkedService": {
                                            "referenceName": "customerStorageLinkedService",
                                            "type": "LinkedServiceReference"
                                        },
                                        "folderPath": "receivedcopy"
                                    },
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    }
                                }
                            },
                            {
                                "name": "LoadIntoOperationalTable_SynapseWithSQL",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoStagingTable_SynapseWithSQL",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/customerStorageLinkedService')]"
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "LoadIntoOperationalTable_SynapseWithSQL",
                                        "type": "DataFlowReference",
                                        "parameters": {},
                                        "datasetParameters": {
                                            "sourceSynapseStagingTable": {},
                                            "sourceSqlDbStaging": {},
                                            "SynapseOperationalTable": {},
                                            "SqlOperationalSink": {}
                                        }
                                    },
                                    "staging": {
                                        "linkedService": {
                                            "referenceName": "customerStorageLinkedService",
                                            "type": "LinkedServiceReference"
                                        },
                                        "folderPath": "receivedcopy"
                                    },
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    }
                                }
                            },
                            {
                                "name": "Create Views in Synapse",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoOperationalTable_SynapseWithSQL",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "0.00:10:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "SqlDWSource",
                                        "sqlReaderQuery": "IF EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario') \n\nBEGIN\nIF NOT EXISTS (select * from sys.views where name = N'Ontario_view')\n    EXEC('create view Ontario.Ontario_view as select Load_Date, Load_Time, Accurate_Episode_Date, Case_Reported_Date, Test_Reported_Date, Specimen_Date, Age_Group, Client_Gender, Reporting_Phu, Reporting_Phu_Address, Reporting_Phu_City, Reporting_Phu_Latitude, Reporting_Phu_Longitude from Ontario.operationalOntario;')\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
                                        "queryTimeout": "00:10:00"
                                    },
                                    "dataset": {
                                        "referenceName": "AzureSynapseAnalyticsStagingTableSource",
                                        "type": "DatasetReference"
                                    }
                                }
                            },
                            {
                                "name": "Create Views in SQL DB",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoOperationalTable_SynapseWithSQL",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "0.00:10:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": "IF EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario') \n\nBEGIN\nIF NOT EXISTS (select * from sys.views where name = N'Ontario_view')\n    EXEC('create view Ontario.Ontario_view as select Load_Date, Load_Time, Accurate_Episode_Date, Case_Reported_Date, Test_Reported_Date, Specimen_Date, Age_Group, Client_Gender, Reporting_Phu, Reporting_Phu_Address, Reporting_Phu_City, Reporting_Phu_Latitude, Reporting_Phu_Longitude from Ontario.operationalOntario;')\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
                                        "queryTimeout": "00:05:00"
                                    },
                                    "dataset": {
                                        "referenceName": "SqlDbStagingSource",
                                        "type": "DatasetReference"
                                    }
                                }
                            }
                        ],
                        "annotations": []
                    },
                    "dependsOn": [
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/OntarioInputDataset')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/OntarioOutputDatasetSink')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SqlDbStagingSource')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSource')]",

                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/dataflows/LoadIntoStagingTable_SynapseWithSQL')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/customerStorageLinkedService')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/dataflows/LoadIntoOperationalTable_SynapseWithSQL')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'SQL Database'),equals(parameters('deployAndUseDataShare'),'No'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SqlDataLoader')]",
                    "type": "Microsoft.DataFactory/factories/pipelines",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "activities": [
                            {
                                "name": "Copy latest data",
                                "type": "Copy",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "BinarySource",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageReadSettings",
                                            "recursive": true
                                        },
                                        "formatSettings": {
                                            "type": "BinaryReadSettings"
                                        }
                                    },
                                    "sink": {
                                        "type": "BinarySink",
                                        "storeSettings": {
                                            "type": "AzureBlobStorageWriteSettings"
                                        }
                                    },
                                    "enableStaging": false
                                },
                                "inputs": [
                                    {
                                        "referenceName": "OntarioInputDataset",
                                        "type": "DatasetReference"
                                    }
                                ],
                                "outputs": [
                                    {
                                        "referenceName": "OntarioOutputDatasetSink",
                                        "type": "DatasetReference"
                                    }
                                ]
                            },
                            {
                                "name": "Verify Schema in SQL DB",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "Copy latest data",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": "IF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario') \n\nBEGIN\n\n    EXEC('CREATE SCHEMA [Ontario] AUTHORIZATION [dbo]');\n\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
                                        "queryTimeout": "00:10:00"
                                    },
                                    "dataset": {
                                        "referenceName": "SqlDbStagingSource",
                                        "type": "DatasetReference"
                                    }
                                }
                            },
                            {
                                "name": "LoadIntoStagingTable_SQL",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "Verify Schema in SQL DB",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/customerStorageLinkedService')]"
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "LoadIntoStagingTable_SQL",
                                        "type": "DataFlowReference",
                                        "parameters": {},
                                        "datasetParameters": {
                                            "SourceCSV": {},
                                            "SynapseStagingSink": {},
                                            "SQLStagingSink": {}
                                        }
                                    },
                                    "staging": {
                                        "folderPath": "receivedcopy"
                                    },
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    }
                                }
                            },
                            {
                                "name": "LoadIntoOperationalTable_SQL",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoStagingTable_SQL",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    },
                                    "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/customerStorageLinkedService')]"
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "LoadIntoOperationalTable_SQL",
                                        "type": "DataFlowReference",
                                        "parameters": {},
                                        "datasetParameters": {
                                            "sourceSynapseStagingTable": {},
                                            "sourceSqlDbStaging": {},
                                            "SynapseOperationalTable": {},
                                            "SqlOperationalSink": {}
                                        }
                                    },
                                    "staging": {
                                        "folderPath": "receivedcopy"
                                    },
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    }
                                }
                            },
                            {
                                "name": "Create Views in SQL DB",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoOperationalTable_SQL",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": "IF EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario') \n\nBEGIN\nIF NOT EXISTS (select * from sys.views where name = N'Ontario_view')\n    EXEC('create view Ontario.Ontario_view as select Load_Date, Load_Time, Accurate_Episode_Date, Case_Reported_Date, Test_Reported_Date, Specimen_Date, Age_Group, Client_Gender, Reporting_Phu, Reporting_Phu_Address, Reporting_Phu_City, Reporting_Phu_Latitude, Reporting_Phu_Longitude from Ontario.operationalOntario;')\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
                                        "queryTimeout": "00:10:00"
                                    },
                                    "dataset": {
                                        "referenceName": "SqlOperationalSink",
                                        "type": "DatasetReference"
                                    }
                                }
                            }
                        ],
                        "annotations": []
                    },
                    "dependsOn": [
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/OntarioInputDataset')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/OntarioOutputDatasetSink')]",
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/dataflows/LoadIntoStagingTable_SQL')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/customerStorageLinkedService')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/dataflows/LoadIntoOperationalTable_SQL')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'Synapse Database Warehouse'),equals(parameters('deployAndUseDataShare'),'No'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SynapseDataLoaderPipelineTrigger')]",
                    "type": "Microsoft.DataFactory/factories/triggers",
                    "apiVersion": "2018-06-01",
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/pipelines/SynapseDataLoader')]"
                    ],
                    "properties": {
                        "annotations": [
                        ],
                        "runtimeState": "Started",
                        "pipelines": [
                            {
                                "pipelineReference": {
                                    "referenceName": "SynapseDataLoader",
                                    "type": "PipelineReference"
                                },
                                "parameters": {
                                }
                            }
                        ],
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 24,
                                "startTime": "[parameters('triggerStartTime')]",
                                "timeZone": "UTC"
                            }
                        }
                    }
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'Both'),equals(parameters('deployAndUseDataShare'),'No'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SynapseAndSqlDataLoaderPipelineTrigger')]",
                    "type": "Microsoft.DataFactory/factories/triggers",
                    "apiVersion": "2018-06-01",
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/pipelines/SynapseAndSqlDataLoader')]"
                    ],
                    "properties": {
                        "annotations": [
                        ],
                        "runtimeState": "Started",
                        "pipelines": [
                            {
                                "pipelineReference": {
                                    "referenceName": "SynapseAndSqlDataLoader",
                                    "type": "PipelineReference"
                                },
                                "parameters": {
                                }
                            }
                        ],
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 24,
                                "startTime": "[parameters('triggerStartTime')]",
                                "timeZone": "UTC"
                            }
                        }
                    }
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'SQL Database'),equals(parameters('deployAndUseDataShare'),'No'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SqlDataLoaderPipelineTrigger')]",
                    "type": "Microsoft.DataFactory/factories/triggers",
                    "apiVersion": "2018-06-01",
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/pipelines/SqlDataLoader')]"
                    ],
                    "properties": {
                        "annotations": [
                        ],
                        "runtimeState": "Started",
                        "pipelines": [
                            {
                                "pipelineReference": {
                                    "referenceName": "SqlDataLoader",
                                    "type": "PipelineReference"
                                },
                                "parameters": {
                                }
                            }
                        ],
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 24,
                                "startTime": "[parameters('triggerStartTime')]",
                                "timeZone": "UTC"
                            }
                        }
                    }
                },
                {
                    "type": "Microsoft.Insights/actionGroups",
                    "apiVersion": "2018-03-01",
                    "name": "NotificationAlertFromADF",
                    "location": "Global",
                    "properties": {
                        "groupShortName": "ADFalerts",
                        "enabled": true,
                        "emailReceivers": [
                            {
                                "name": "notifEmail",
                                "emailAddress": "[parameters('notificationEmail')]"
                            }
                        ],
                        "webhookReceivers": [
                            {
                                "name": "msftTeamsNotify",
                                "serviceUri": "[parameters('webHookUri')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Synapse Database Warehouse')]",
                    "name": "synapseFailedPipelineAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline failure",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "SynapseDataLoader", "SynapseDataLoaderWithDataShare" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Synapse Database Warehouse')]",
                    "name": "synapseCancelledPipelineAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "SynapseDataLoader", "SynapseDataLoaderWithDataShare" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Synapse Database Warehouse')]",
                    "name": "synapseFailedActivityAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for activity failure in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "Lookup", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "Copy latest data", "Verify Master Key", "LoadIntoStagingTable", "LoadIntoOperationalTable",  "Create Views in Synapse"]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "SynapseDataLoader", "SynapseDataLoaderWithDataShare" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Synapse Database Warehouse')]",
                    "name": "synapseCancelledActivityAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for activity cancellation in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "Lookup", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "Copy latest data", "Verify Master Key", "LoadIntoStagingTable", "LoadIntoOperationalTable", "Create Views in Synapse" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "SynapseDataLoader", "SynapseDataLoaderWithDataShare" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Synapse Database Warehouse')]",
                    "name": "synapseCancelledTriggerAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for trigger run cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "SynapseDataLoaderPipelineTrigger", "SynapseDataLoaderWithDataSharePipelineTrigger" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Synapse Database Warehouse')]",
                    "name": "synapseFailedTriggerRunAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for trigger run failure",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "SynapseDataLoaderPipelineTrigger", "SynapseDataLoaderWithDataSharePipelineTrigger" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Synapse Database Warehouse')]",
                    "type": "Microsoft.AlertsManagement/actionRules",
                    "apiVersion": "2019-05-05-preview",
                    "name": "suppressResolveNotificationSynapse",
                    "location": "global",
                    "properties": {
                        "conditions": {
                            "severity": {
                                "operator": "Equals",
                                "values": [
                                    "Sev0"
                                ]
                            },
                            "monitorCondition": {
                                "operator": "Equals",
                                "values": [
                                    "Resolved"
                                ]
                            }
                        },
                        "suppressionConfig": {
                            "recurrenceType": "always"
                        },
                        "status": "Enabled",
                        "type": "Suppression",
                        "scope": {
                            "scopeType": "Resource",
                            "values": [
                                "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/actionGroups/', 'NotificationAlertFromADF')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'synapseFailedPipelineAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'synapseFailedActivityAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'synapseCancelledPipelineAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'synapseCancelledActivityAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'synapseCancelledTriggerAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'synapseFailedTriggerRunAlertConfig')]"

                            ]
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF",
                        "synapseFailedPipelineAlertConfig",
                        "synapseFailedActivityAlertConfig",
                        "synapseCancelledPipelineAlertConfig",
                        "synapseCancelledActivityAlertConfig",
                        "synapseCancelledTriggerAlertConfig",
                        "synapseFailedTriggerRunAlertConfig"

                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Both')]",
                    "name": "sqlAndsynapseFailedPipelineAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline failure",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "SynapseAndSqlDataLoader", "SynapseAndSqlDataLoaderWithDataShare" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Both')]",
                    "name": "sqlAndsynapseCancelledPipelineAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "SynapseAndSqlDataLoader", "SynapseAndSqlDataLoaderWithDataShare" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Both')]",
                    "name": "sqlAndsynapseFailedActivityAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for activity failure in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "Lookup", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "Copy latest data", "Verify Master Key", "Verify Schema in SQL DB", "LoadIntoStagingTable_SynapseWithSQL", "LoadIntoOperationalTable_SynapseWithSQL", "Create Views in Synapse", "Create Views in SQL DB" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "SynapseAndSqlDataLoader", "SynapseAndSqlDataLoaderWithDataShare" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Both')]",
                    "name": "sqlAndsynapseCancelledActivityAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for activity cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "Lookup", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "Copy latest data", "Verify Master Key", "Verify Schema in SQL DB", "LoadIntoStagingTable_SynapseWithSQL", "LoadIntoOperationalTable_SynapseWithSQL", "Create Views in Synapse", "Create Views in SQL DB" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "SynapseAndSqlDataLoader", "SynapseAndSqlDataLoaderWithDataShare" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Both')]",
                    "name": "sqlAndsynapseCancelledTriggerAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for trigger cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "SynapseAndSqlDataLoaderPipelineTrigger", "SynapseAndSqlDataLoaderWithDataSharePipelineTrigger" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Both')]",
                    "name": "sqlAndsynapseFailedTriggerRunAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline trigger run fail",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "SynapseAndSqlDataLoaderPipelineTrigger", "SynapseAndSqlDataLoaderWithDataSharePipelineTrigger" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'Both')]",
                    "type": "Microsoft.AlertsManagement/actionRules",
                    "apiVersion": "2019-05-05-preview",
                    "name": "suppressResolveNotificationBoth",
                    "location": "global",
                    "properties": {
                        "conditions": {
                            "severity": {
                                "operator": "Equals",
                                "values": [
                                    "Sev0"
                                ]
                            },
                            "monitorCondition": {
                                "operator": "Equals",
                                "values": [
                                    "Resolved"
                                ]
                            }
                        },
                        "suppressionConfig": {
                            "recurrenceType": "always"
                        },
                        "status": "Enabled",
                        "type": "Suppression",
                        "scope": {
                            "scopeType": "Resource",
                            "values": [
                                "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/actionGroups/', 'NotificationAlertFromADF')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'sqlAndsynapseFailedPipelineAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'sqlAndsynapseFailedActivityAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'sqlAndsynapseCancelledPipelineAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'sqlAndsynapseCancelledActivityAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'sqlAndsynapseCancelledTriggerAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'sqlAndsynapseFailedTriggerRunAlertConfig')]"
                            ]
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF",
                        "sqlAndsynapseFailedPipelineAlertConfig",
                        "sqlAndsynapseFailedActivityAlertConfig",
                        "sqlAndsynapseCancelledPipelineAlertConfig",
                        "sqlAndsynapseCancelledActivityAlertConfig",
                        "sqlAndsynapseCancelledTriggerAlertConfig",
                        "sqlAndsynapseFailedTriggerRunAlertConfig"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'SQL Database')]",
                    "name": "sqlFailedPipelineAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline failure",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "SqlDataLoader", "SqlDataLoaderWithDataShare" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'SQL Database')]",
                    "name": "sqlCancelledPipelineAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "PipelineCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "SqlDataLoader", "SqlDataLoaderWithDataShare" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'SQL Database')]",
                    "name": "sqlFailedActivityAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for activity failure in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "Lookup", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "Copy latest data", "LoadIntoStagingTable_SQL", "LoadIntoOperationalTable_SQL", "Verify Schema in SQL DB", "Create Views in SQL DB" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "SqlDataLoader", "SqlDataLoaderWithDataShare" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "0.10",
                                    "timeAggregation": "Average"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'SQL Database')]",
                    "name": "sqlCancelledActivityAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for activity cancellation in a pipeline",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "ActivityCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "ActivityType",
                                            "operator": "Include",
                                            "values": [ "Copy", "Lookup", "ExecuteDataFlow" ]
                                        },
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "Copy latest data", "LoadIntoStagingTable_SQL", "LoadIntoOperationalTable_SQL", "Verify Schema in SQL DB", "Create Views in SQL DB" ]
                                        },
                                        {
                                            "name": "PipelineName",
                                            "operator": "Include",
                                            "values": [ "SqlDataLoader", "SqlDataLoaderWithDataShare" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'SQL Database')]",
                    "name": "sqlCancelledTriggerAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline trigger cancellation",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerCancelledRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "SqlDataLoaderPipelineTrigger", "SqlDataLoaderWithDataSharePipelineTrigger" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'SQL Database')]",
                    "name": "sqlFailedTriggerRunAlertConfig",
                    "type": "Microsoft.Insights/metricAlerts",
                    "location": "global",
                    "apiVersion": "2018-03-01",
                    "tags": {},
                    "properties": {
                        "description": "Metric alert for pipeline trigger run failed",
                        "severity": "0",
                        "enabled": "true",
                        "scopes": [ "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]" ],
                        "evaluationFrequency": "PT1M",
                        "windowSize": "PT1M",
                        "criteria": {
                            "odata.type": "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
                            "allOf": [
                                {
                                    "name": "1st criterion",
                                    "metricName": "TriggerFailedRuns",
                                    "dimensions": [
                                        {
                                            "name": "Name",
                                            "operator": "Include",
                                            "values": [ "SqlDataLoaderPipelineTrigger", "SqlDataLoaderWithDataSharePipelineTrigger" ]
                                        },
                                        {
                                            "name": "FailureType",
                                            "operator": "Include",
                                            "values": [ "UserError", "SystemError", "BadGateway" ]
                                        }
                                    ],
                                    "operator": "GreaterThanOrEqual",
                                    "threshold": "1",
                                    "timeAggregation": "Total"
                                }
                            ]
                        },
                        "actions": [
                            {
                                "actionGroupId": "[resourceId('Microsoft.Insights/actionGroups','NotificationAlertFromADF')]"
                            }
                        ]
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF"
                    ]
                },
                {
                    "condition": "[equals(parameters('selectDataLoader'),'SQL Database')]",
                    "type": "Microsoft.AlertsManagement/actionRules",
                    "apiVersion": "2019-05-05-preview",
                    "name": "suppressResolveNotificationSQL",
                    "location": "global",
                    "properties": {
                        "conditions": {
                            "severity": {
                                "operator": "Equals",
                                "values": [
                                    "Sev0"
                                ]
                            },
                            "monitorCondition": {
                                "operator": "Equals",
                                "values": [
                                    "Resolved"
                                ]
                            }
                        },
                        "suppressionConfig": {
                            "recurrenceType": "always"
                        },
                        "status": "Enabled",
                        "type": "Suppression",
                        "scope": {
                            "scopeType": "Resource",
                            "values": [
                                "[concat(resourceGroup().id,'/providers/Microsoft.DataFactory/factories/', parameters('dataFactoryName'))]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/actionGroups/', 'NotificationAlertFromADF')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'sqlFailedPipelineAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'sqlFailedActivityAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'sqlCancelledPipelineAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'sqlCancelledActivityAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'sqlCancelledTriggerAlertConfig')]",
                                "[concat(resourceGroup().id,'/providers/Microsoft.Insights/metricAlerts/', 'sqlFailedTriggerRunAlertConfig')]"
                            ]
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "NotificationAlertFromADF",
                        "sqlFailedPipelineAlertConfig",
                        "sqlFailedActivityAlertConfig",
                        "sqlCancelledPipelineAlertConfig",
                        "sqlCancelledActivityAlertConfig",
                        "sqlCancelledTriggerAlertConfig",
                        "sqlFailedTriggerRunAlertConfig"
                    ]
                },







                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'SQL Database'),equals(parameters('deployAndUseDataShare'),'Yes'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SqlDataLoaderWithDataShare')]",
                    "type": "Microsoft.DataFactory/factories/pipelines",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "activities": [
                            {
                                "name": "Verify Schema in SQL DB",
                                "type": "Lookup",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": "IF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario') \n\nBEGIN\n\n    EXEC('CREATE SCHEMA [Ontario] AUTHORIZATION [dbo]');\n\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
                                        "queryTimeout": "00:10:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "SqlDbStagingSource",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                }
                            },
                            {
                                "name": "LoadIntoStagingTable_SQL",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "Verify Schema in SQL DB",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "LoadIntoStagingTable_SQL_from_DataShare",
                                        "type": "DataFlowReference",
                                        "parameters": {},
                                        "datasetParameters": {
                                            "SourceCSV": {},
                                            "SQLStagingSink": {}
                                        }
                                    },
                                    "staging": {
                                        "folderPath": "receivedcopy"
                                    },
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    }
                                }
                            },
                            {
                                "name": "LoadIntoOperationalTable_SQL",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoStagingTable_SQL",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "LoadIntoOperationalTable_SQL",
                                        "type": "DataFlowReference",
                                        "parameters": {},
                                        "datasetParameters": {
                                            "sourceSqlDbStaging": {},
                                            "SqlOperationalSink": {}
                                        }
                                    },
                                    "staging": {
                                        "folderPath": "receivedcopy"
                                    },
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    }
                                }
                            },
                            {
                                "name": "Create Views in SQL DB",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoOperationalTable_SQL",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": "IF EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario') \n\nBEGIN\nIF NOT EXISTS (select * from sys.views where name = N'Ontario_view')\n    EXEC('create view Ontario.Ontario_view as select Load_Date, Load_Time, Accurate_Episode_Date, Case_Reported_Date, Test_Reported_Date, Specimen_Date, Age_Group, Client_Gender, Reporting_Phu, Reporting_Phu_Address, Reporting_Phu_City, Reporting_Phu_Latitude, Reporting_Phu_Longitude from Ontario.operationalOntario;')\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
                                        "queryTimeout": "00:10:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "SqlOperationalSink",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                }
                            }
                        ],
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "annotations": []
                    },
                    "dependsOn": [
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/source_dataset')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SqlDbStagingSource')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSource')]",
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/dataflows/LoadIntoStagingTable_SQL_from_DataShare')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/customerStorageLinkedService')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/source_linkedservice')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/dataflows/LoadIntoOperationalTable_SynapseWithSQL')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('deployAndUseDataShare'),'Yes')]",
                    "name": "[concat(parameters('dataFactoryName'), '/source_dataset')]",
                    "type": "Microsoft.DataFactory/factories/datasets",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "linkedServiceName": {
                            "referenceName": "source_linkedservice",
                            "type": "LinkedServiceReference"
                        },
                        "folder": {
                            "name": "CovidOntario/Sources"
                        },
                        "annotations": [],
                        "type": "DelimitedText",
                        "typeProperties": {
                            "location": {
                                "type": "AzureBlobStorageLocation",
                                "fileName": "covid_tracking.csv",
                                "folderPath": "curated/covid-19/covid_ontario/latest",
                                "container": "receivedcopy"
                            },
                            "columnDelimiter": ",",
                            "escapeChar": "\\",
                            "firstRowAsHeader": true,
                            "quoteChar": "\""
                        },
                        "schema": []
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/source_linkedservice')]"
                    ]
                },
                {
                    "condition": "[equals(parameters('deployAndUseDataShare'),'Yes')]",
                    "name": "[concat(parameters('dataFactoryName'), '/source_linkedservice')]",
                    "type": "Microsoft.DataFactory/factories/linkedServices",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "type": "AzureBlobStorage",
                        "typeProperties": {
                            "connectionString": "[concat('DefaultEndpointsProtocol=https;AccountName=',parameters('storageAccountName'),';AccountKey=',listKeys(concat(resourceGroup().id,'/providers/Microsoft.Storage/storageAccounts/', parameters('storageAccountName')), '2019-06-01').keys[0].value)]"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'SQL Database'),equals(parameters('deployAndUseDataShare'),'Yes'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/LoadIntoStagingTable_SQL_from_DataShare')]",
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "source_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SourceCSV"
                                }
                            ],
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "SqlDbStagingSink",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SQLStagingSink"
                                }
                            ],
                            "transformations": [
                                {
                                    "name": "CleanData"
                                }
                            ],
                            "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'filename',\n\tinferDriftedColumnTypes: true) ~> SourceCSV\nSourceCSV derive(each(match(type=='string'), $$ = trim(toString($$))),\n\t\teach(match(type=='double'), $$ = round(toDouble($$),3)),\n\t\teach(match(type=='short'), $$ = toShort($$)),\n\t\teach(match(type=='integer'), $$ = toInteger($$)),\n\t\teach(match(type=='decimal'), $$ = toDecimal($$))) ~> CleanData\nCleanData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLStagingSink"
                        }
                    },
                    "dependsOn": [
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/source_dataset')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSink')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SqlDbStagingSink')]",
                        "[parameters('dataFactoryName')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'SQL Database'),equals(parameters('deployAndUseDataShare'),'Yes'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SqlDataLoaderWithDataSharePipelineTrigger')]",
                    "type": "Microsoft.DataFactory/factories/triggers",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "runtimeState": "Started",
                        "pipeline": {
                            "pipelineReference": {
                                "referenceName": "SqlDataLoaderWithDataShare",
                                "type": "PipelineReference"
                            },
                            "parameters": {}
                        },
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 24,
                                "startTime": "[parameters('triggerStartTime')]",
                                "timeZone": "UTC"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/pipelines/SqlDataLoaderWithDataShare')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'Synapse Database Warehouse'),equals(parameters('deployAndUseDataShare'),'Yes'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SynapseDataLoaderWithDataShare')]",
                    "type": "Microsoft.DataFactory/factories/pipelines",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "activities": [
                            {
                                "name": "Verify Master Key",
                                "type": "Lookup",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "SqlDWSource",
                                        "sqlReaderQuery": "IF (select Count(*) from sys.symmetric_keys where name like '%DatabaseMasterKey%') = 0\n\nBEGIN\n\nCREATE master key;\n\nIF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario' )\n\n    EXEC('CREATE SCHEMA [Ontario] AUTHORIZATION [dbo]');\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\nIF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario' )\n\n    EXEC('CREATE SCHEMA [Ontario] AUTHORIZATION [dbo]');\n\nselect Count(*) from sys.symmetric_keys;\n\nEND\n",
                                        "queryTimeout": "02:00:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "AzureSynapseAnalyticsStagingTableSource",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                }
                            },
                            {
                                "name": "LoadIntoStagingTable",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "Verify Master Key",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "LoadIntoStagingTable_from_DataShare",
                                        "type": "DataFlowReference",
                                        "parameters": {},
                                        "datasetParameters": {
                                            "SourceCSV": {},
                                            "SynapseStagingSink": {}
                                        }
                                    },
                                    "staging": {
                                        "linkedService": {
                                            "referenceName": "customerStorageLinkedService",
                                            "type": "LinkedServiceReference"
                                        },
                                        "folderPath": "receivedcopy"
                                    },
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    }
                                }
                            },
                            {
                                "name": "LoadIntoOperationalTable",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoStagingTable",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "LoadIntoOperationalTable",
                                        "type": "DataFlowReference",
                                        "parameters": {},
                                        "datasetParameters": {
                                            "sourceSynapseStagingTable": {},
                                            "SynapseOperationalTable": {}
                                        }
                                    },
                                    "staging": {
                                        "linkedService": {
                                            "referenceName": "customerStorageLinkedService",
                                            "type": "LinkedServiceReference"
                                        },
                                        "folderPath": "receivedcopy"
                                    },
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    }
                                }
                            },
                            {
                                "name": "Create Views in Synapse",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoOperationalTable",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "SqlDWSource",
                                        "sqlReaderQuery": "IF EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario') \n\nBEGIN\nIF NOT EXISTS (select * from sys.views where name = N'Ontario_view')\n    EXEC('create view Ontario.Ontario_view as select Load_Date, Load_Time, Accurate_Episode_Date, Case_Reported_Date, Test_Reported_Date, Specimen_Date, Age_Group, Client_Gender, Reporting_Phu, Reporting_Phu_Address, Reporting_Phu_City, Reporting_Phu_Latitude, Reporting_Phu_Longitude from Ontario.operationalOntario;')\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
                                        "queryTimeout": "00:10:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "SynapseOperationalTable_sink",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                }
                            }
                        ],
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "annotations": []
                    },
                    "dependsOn": [
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/dataflows/LoadIntoStagingTable_from_DataShare')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/dataflows/LoadIntoOperationalTable')]",
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/source_dataset')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSource')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SynapseOperationalTable_sink')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'Synapse Database Warehouse'),equals(parameters('deployAndUseDataShare'),'Yes'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/LoadIntoStagingTable_from_DataShare')]",
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "source_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SourceCSV"
                                }
                            ],
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "AzureSynapseAnalyticsStagingTableSink",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SynapseStagingSink"
                                }
                            ],
                            "transformations": [
                                {
                                    "name": "CleanData"
                                }
                            ],
                            "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'filename',\n\tinferDriftedColumnTypes: true) ~> SourceCSV\nSourceCSV derive(each(match(type=='string'), $$ = trim(toString($$))),\n\t\teach(match(type=='integer'), $$ = toInteger($$)),\n\t\teach(match(type=='short'), $$ = toShort($$)),\n\t\teach(match(type=='double'), $$ = round(toDouble($$),3)),\n\t\teach(match(type=='decimal'), $$ = toDecimal($$))) ~> CleanData\nCleanData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SynapseStagingSink"
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/source_dataset')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSink')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'Synapse Database Warehouse'),equals(parameters('deployAndUseDataShare'),'Yes'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SynapseDataLoaderWithDataSharePipelineTrigger')]",
                    "type": "Microsoft.DataFactory/factories/triggers",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "runtimeState": "Started",
                        "pipeline": {
                            "pipelineReference": {
                                "referenceName": "SynapseDataLoaderWithDataShare",
                                "type": "PipelineReference"
                            },
                            "parameters": {}
                        },
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 24,
                                "startTime": "[parameters('triggerStartTime')]",
                                "timeZone": "UTC"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/pipelines/SynapseDataLoaderWithDataShare')]"
                    ]
                },












                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'Both'),equals(parameters('deployAndUseDataShare'),'Yes'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SynapseAndSqlDataLoaderWithDataShare')]",
                    "type": "Microsoft.DataFactory/factories/pipelines",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "activities": [
                            {
                                "name": "Verify Master Key",
                                "type": "Lookup",
                                "dependsOn": [],
                                "policy": {
                                    "timeout": "0.00:10:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "SqlDWSource",
                                        "sqlReaderQuery": "IF (select Count(*) from sys.symmetric_keys where name like '%DatabaseMasterKey%') = 0\n\nBEGIN\n\nCREATE master key;\n\nIF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario' )\n\n    EXEC('CREATE SCHEMA [Ontario] AUTHORIZATION [dbo]');\nselect Count(*) from sys.symmetric_keys;\n\n\nEND\n\nELSE \n\nBEGIN\nIF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario' )\n\n    EXEC('CREATE SCHEMA [Ontario] AUTHORIZATION [dbo]');\n\nselect Count(*) from sys.symmetric_keys;\n\nEND\n",
                                        "queryTimeout": "00:05:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "AzureSynapseAnalyticsStagingTableSource",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                }
                            },
                            {
                                "name": "Verify Schema in SQL DB",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "Verify Master Key",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "0.00:10:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": "IF NOT EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario') \n\nBEGIN\n\n    EXEC('CREATE SCHEMA [Ontario] AUTHORIZATION [dbo]');\n\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
                                        "queryTimeout": "00:05:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "SqlDbStagingSource",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                }
                            },
                            {
                                "name": "LoadIntoStagingTable_SynapseWithSQL",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "Verify Schema in SQL DB",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "0.00:30:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "LoadIntoStagingTable_SynapseWithSQL_from_DataShare",
                                        "type": "DataFlowReference",
                                        "parameters": {},
                                        "datasetParameters": {
                                            "SourceCSV": {},
                                            "SynapseStagingSink": {},
                                            "SQLStagingSink": {}
                                        }
                                    },
                                    "staging": {
                                        "linkedService": {
                                            "referenceName": "customerStorageLinkedService",
                                            "type": "LinkedServiceReference"
                                        },
                                        "folderPath": "receivedcopy"
                                    },
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    }
                                }
                            },
                            {
                                "name": "LoadIntoOperationalTable_SynapseWithSQL",
                                "type": "ExecuteDataFlow",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoStagingTable_SynapseWithSQL",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "7.00:00:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "dataflow": {
                                        "referenceName": "LoadIntoOperationalTable_SynapseWithSQL",
                                        "type": "DataFlowReference",
                                        "parameters": {},
                                        "datasetParameters": {
                                            "sourceSynapseStagingTable": {},
                                            "sourceSqlDbStaging": {},
                                            "SynapseOperationalTable": {},
                                            "SqlOperationalSink": {}
                                        }
                                    },
                                    "staging": {
                                        "linkedService": {
                                            "referenceName": "customerStorageLinkedService",
                                            "type": "LinkedServiceReference"
                                        },
                                        "folderPath": "receivedcopy"
                                    },
                                    "compute": {
                                        "coreCount": 8,
                                        "computeType": "General"
                                    }
                                }
                            },
                            {
                                "name": "Create Views in Synapse",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoOperationalTable_SynapseWithSQL",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "0.00:10:00",
                                    "retry": 0,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "SqlDWSource",
                                        "sqlReaderQuery": "IF EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario') \n\nBEGIN\nIF NOT EXISTS (select * from sys.views where name = N'Ontario_view')\n    EXEC('create view Ontario.Ontario_view as select Load_Date, Load_Time, Accurate_Episode_Date, Case_Reported_Date, Test_Reported_Date, Specimen_Date, Age_Group, Client_Gender, Reporting_Phu, Reporting_Phu_Address, Reporting_Phu_City, Reporting_Phu_Latitude, Reporting_Phu_Longitude from Ontario.operationalOntario;')\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
                                        "queryTimeout": "00:10:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "AzureSynapseAnalyticsStagingTableSource",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                }
                            },
                            {
                                "name": "Create Views in SQL DB",
                                "type": "Lookup",
                                "dependsOn": [
                                    {
                                        "activity": "LoadIntoOperationalTable_SynapseWithSQL",
                                        "dependencyConditions": [
                                            "Succeeded"
                                        ]
                                    }
                                ],
                                "policy": {
                                    "timeout": "0.00:10:00",
                                    "retry": 3,
                                    "retryIntervalInSeconds": 30,
                                    "secureOutput": false,
                                    "secureInput": false
                                },
                                "userProperties": [],
                                "typeProperties": {
                                    "source": {
                                        "type": "AzureSqlSource",
                                        "sqlReaderQuery": "IF EXISTS ( SELECT  * FROM sys.schemas WHERE name = N'Ontario') \n\nBEGIN\nIF NOT EXISTS (select * from sys.views where name = N'Ontario_view')\n    EXEC('create view Ontario.Ontario_view as select Load_Date, Load_Time, Accurate_Episode_Date, Case_Reported_Date, Test_Reported_Date, Specimen_Date, Age_Group, Client_Gender, Reporting_Phu, Reporting_Phu_Address, Reporting_Phu_City, Reporting_Phu_Latitude, Reporting_Phu_Longitude from Ontario.operationalOntario;')\nselect Count(*) from sys.symmetric_keys;\n\nEND\n\nELSE \n\nBEGIN\n\nselect Count(*) from sys.symmetric_keys;\n\nEND",
                                        "queryTimeout": "00:05:00",
                                        "partitionOption": "None"
                                    },
                                    "dataset": {
                                        "referenceName": "SqlDbStagingSource",
                                        "type": "DatasetReference",
                                        "parameters": {}
                                    }
                                }
                            }
                        ],
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "annotations": []
                    },
                    "dependsOn": [
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/source_dataset')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SqlDbStagingSource')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSource')]",

                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/dataflows/LoadIntoStagingTable_SynapseWithSQL')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/customerStorageLinkedService')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/linkedServices/source_linkedservice')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/dataflows/LoadIntoOperationalTable_SynapseWithSQL')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'Both'),equals(parameters('deployAndUseDataShare'),'Yes'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/LoadIntoStagingTable_SynapseWithSQL_from_DataShare')]",
                    "type": "Microsoft.DataFactory/factories/dataflows",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "folder": {
                            "name": "CovidOntario"
                        },
                        "type": "MappingDataFlow",
                        "typeProperties": {
                            "sources": [
                                {
                                    "dataset": {
                                        "referenceName": "source_dataset",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SourceCSV"
                                }
                            ],
                            "sinks": [
                                {
                                    "dataset": {
                                        "referenceName": "AzureSynapseAnalyticsStagingTableSink",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SynapseStagingSink"
                                },
                                {
                                    "dataset": {
                                        "referenceName": "SqlDbStagingSink",
                                        "type": "DatasetReference"
                                    },
                                    "name": "SQLStagingSink"
                                }
                            ],
                            "transformations": [
                                {
                                    "name": "CleanData"
                                }
                            ],
                            "script": "source(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\trowUrlColumn: 'filename',\n\tinferDriftedColumnTypes: true) ~> SourceCSV\nSourceCSV derive(each(match(type=='string'), $$ = trim(toString($$))),\n\t\teach(match(type=='short'), $$ = toShort($$)),\n\t\teach(match(type=='integer'), $$ = toInteger($$)),\n\t\teach(match(type=='double'), $$ = round(toDouble($$),3)),\n\t\teach(match(type=='decimal'), $$ = toDecimal($$))) ~> CleanData\nCleanData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tstaged: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SynapseStagingSink\nCleanData sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\trecreate:true,\n\tformat: 'table',\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SQLStagingSink"
                        }
                    },
                    "dependsOn": [
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/source_dataset')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/AzureSynapseAnalyticsStagingTableSink')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/datasets/SqlDbStagingSink')]",
                        "[parameters('dataFactoryName')]"
                    ]
                },
                {
                    "condition": "[and(equals(parameters('selectDataLoader'),'Both'),equals(parameters('deployAndUseDataShare'),'Yes'))]",
                    "name": "[concat(parameters('dataFactoryName'), '/SynapseAndSqlDataLoaderWithDataSharePipelineTrigger')]",
                    "type": "Microsoft.DataFactory/factories/triggers",
                    "apiVersion": "2018-06-01",
                    "properties": {
                        "annotations": [],
                        "runtimeState": "Started",
                        "pipeline": {
                            "pipelineReference": {
                                "referenceName": "SynapseAndSqlDataLoaderWithDataShare",
                                "type": "PipelineReference"
                            },
                            "parameters": {}
                        },
                        "type": "ScheduleTrigger",
                        "typeProperties": {
                            "recurrence": {
                                "frequency": "Hour",
                                "interval": 24,
                                "startTime": "[parameters('triggerStartTime')]",
                                "timeZone": "UTC"
                            }
                        }
                    },
                    "dependsOn": [
                        "[parameters('dataFactoryName')]",
                        "[concat(concat('Microsoft.DataFactory/factories/', parameters('dataFactoryName')), '/pipelines/SynapseAndSqlDataLoaderWithDataShare')]"
                    ]
                }

            ]
        }
    ],
    "outputs": {}
}